<?php

namespace Mrfansi\XenditSdk\Data;

use DateTimeInterface;
use Mrfansi\XenditSdk\Data\CardChannel\CardChannelProperties;
use Mrfansi\XenditSdk\Enums\Currency;
use Mrfansi\XenditSdk\Enums\InvoiceStatus;
use Mrfansi\XenditSdk\Enums\Locale;
use Mrfansi\XenditSdk\Enums\PaymentMethod;
use Spatie\LaravelData\Attributes\DataCollectionOf;
use Spatie\LaravelData\Data;
use Spatie\LaravelData\DataCollection;

class InvoiceResponse extends Data
{
    public function __construct(
        /**
         * Invoice ID generated by Xendit
         */
        public string $id,

        /**
         * Your Xendit Business ID
         */
        public string $user_id,

        /**
         * Invoice ID in your server for reconciliation
         */
        public string $external_id,

        /**
         * Current status of the invoice
         */
        public InvoiceStatus $status,

        /**
         * Your company or website name
         */
        public string $merchant_name,

        /**
         * URL to your company's profile picture
         */
        public ?string $merchant_profile_picture_url,

        /**
         * Invoice amount
         */
        public float $amount,

        /**
         * Payer's email address
         */
        public ?string $payer_email,

        /**
         * Invoice description
         */
        public ?string $description,

        /**
         * Public URL for this invoice
         */
        public string $invoice_url,

        /**
         * End customer's details
         */
        public ?Customer $customer,

        /**
         * Notification preferences for this invoice
         */
        public ?NotificationPreference $customer_notification_preference,

        /**
         * Invoice expiry date and time
         */
        public DateTimeInterface $expiry_date,

        /**
         * Available payment methods through banks
         */
        public ?array $available_banks,

        /**
         * Available payment methods through retail outlets
         */
        public ?array $available_retail_outlets,

        /**
         * Should credit card be excluded in invoice UI
         */
        public bool $should_exclude_credit_card,

        /**
         * Should send email notifications
         */
        public bool $should_send_email,

        /**
         * Last update timestamp
         */
        public DateTimeInterface $updated,

        /**
         * Creation timestamp
         */
        public DateTimeInterface $created,

        /**
         * MID label for credit card payments
         */
        public ?string $mid_label = null,

        /**
         * Invoice currency
         */
        public ?Currency $currency = null,

        /**
         * Success redirect URL
         */
        public ?string $success_redirect_url = null,

        /**
         * Failure redirect URL
         */
        public ?string $failure_redirect_url = null,

        /**
         * Payment timestamp
         */
        public ?DateTimeInterface $paid_at = null,

        /**
         * Credit card charge ID
         */
        public ?string $credit_card_charge_id = null,

        /**
         * Payment methods used
         *
         * @var PaymentMethod[]|null
         */
        #[DataCollectionOf(PaymentMethodData::class)]
        public ?DataCollection $payment_method = null,

        /**
         * Payment channels used
         *
         * @var PaymentMethod[]|null
         */
        #[DataCollectionOf(PaymentMethodData::class)]
        public ?DataCollection $payment_channel = null,

        /**
         * Virtual Account number or payment code
         */
        public ?string $payment_destination = null,

        /**
         * Whether to enable one VA number for customers
         *
         * @deprecated
         */
        public ?bool $fixed_va = null,

        /**
         * Invoice locale
         */
        public ?Locale $locale = null,

        /**
         * Items in the invoice
         *
         * @var Item[]|null
         */
        #[DataCollectionOf(Item::class)]
        public ?DataCollection $items = null,

        /**
         * Additional fees
         *
         * @var Fee[]|null
         */
        #[DataCollectionOf(Fee::class)]
        public ?DataCollection $fees = null,

        /**
         * QRIS payment details
         */
        public ?PaymentDetails $payment_details = null,

        /**
         * Whether to authenticate credit card payments
         */
        public ?bool $should_authenticate_credit_card = null,

        /**
         * Channel-specific properties
         */
        public ?CardChannelProperties $channel_properties = null,

        /**
         * User defined metadata
         */
        public ?array $metadata = null,
    ) {}

    public function toArray(): array
    {
        $array = parent::toArray();

        // Handle enums
        $array['status'] = $this->status->value;
        if ($this->currency) {
            $array['currency'] = $this->currency->value;
        }
        if ($this->locale) {
            $array['locale'] = $this->locale->value;
        }

        // Handle collections
        if ($this->payment_method) {
            $array['payment_method'] = array_map(
                fn ($method) => $method->method->value,
                $this->payment_method->items()
            );
        }

        if ($this->payment_channel) {
            $array['payment_channel'] = array_map(
                fn ($method) => $method->method->value,
                $this->payment_channel->items()
            );
        }

        if ($this->items) {
            $array['items'] = array_map(
                fn ($item) => $item->toArray(),
                $this->items->items()
            );
        }

        if ($this->fees) {
            $array['fees'] = array_map(
                fn ($fee) => $fee->toArray(),
                $this->fees->items()
            );
        }

        return $array;
    }
}
